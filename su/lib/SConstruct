import os, sys, string, re
sys.path.append('../../framework')
import bldutil

#############################################################################
# SU LIBRARY
#############################################################################
src = '''
convolution intlin intsinc8 inttable8 mksinc sinc toeplitz xcor yxtoxy
xindex 
'''

try: # distribution version
    Import('env root libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    libdir = '../../lib'
    incdir = '../../include'

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

dynlib = ('-static-intel' not in env.get('LINKFLAGS',''))

############################################################################
# INCLUDES
############################################################################

objects = []
includes = []
dobjects = []

for source in Split(src):
    inc = env.RSF_Include(source,prefix='sf_')
    obj = env.StaticObject(source+'.c')
    env.Ignore(source+'.h',source+'.h')
    env.Depends(obj,inc)
    objects.append(obj)
    includes.append(inc)

    if dynlib:
        obj = env.SharedObject(source+'.c')
        env.Depends(obj,inc)
        dobjects.append(obj)

############################################################################
# MAIN LIBRARY
############################################################################
slib = env.StaticLibrary('su',objects)
inc = env.Command('rsf_su.h',includes,Action(bldutil.__merge))
env.Install('../../lib',slib)
env.Install('../../include',inc)

if dynlib:
    dlib = env.SharedLibrary('su',dobjects,
                             SHLIBPREFIX='libd',
                             LIBS=['drsf']+env.get('LIBS',[]))
    env.Install('../../lib',dlib)

if root:
    libs = [slib]
    if dynlib:
        libs.append(dlib)
    env.Install(libdir,libs)
    env.Install(incdir,inc)

############################################################################
# TESTING
############################################################################
for file in Split('convolution'):
    test = env.StaticObject('Test' + file + '.c')
    prog = env.Program(file,[test,slib],
                       PROGSUFFIX='.x',PROGPREFIX='Test')
