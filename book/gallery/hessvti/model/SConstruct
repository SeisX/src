from rsf.proj import *
from rsf.gallery import hessvti

hessvti.get_model('vp vx eta crho')

Result('vp','grey scalebar=y color=j bias=1.5 allpos=y barreverse=y title="V\_z\^" ')
Result('vx','grey scalebar=y color=j bias=1.5 allpos=y barreverse=y title="V\_x\^" ')
Result('eta','grey scalebar=y color=j allpos=y barreverse=y title="\F10 h\F3 " ')

hessvti.get_shots('shots')

Result('shots','byte | grey3 flat=n frame1=500 frame2=300 frame3=300 title=Shots')

hessvti.get_zodata('zodata')

Result('zodata','grey title="Zero Offset" ')

nt=16001
dt=0.0005

Flow('refl','vp crho','mul ${SOURCES[1]} | depth2time velocity=${SOURCES[0]} nt=%d dt=%g | ai2refl | ricker1 frequency=10 | time2depth velocity=${SOURCES[0]}' % (nt,dt))

Result('refl','grey title="Exploding Reflector" ')

Flow('theta','eta','spike mag=0')

Flow('fft','vp','rtoc | fft3 axis=1 pad=1 | fft3 axis=2 pad=1')
Flow('right left','vp vx eta theta fft',
     '''
     anisolr2 seed=2012 dt=%g velx=${SOURCES[1]} eta=${SOURCES[2]} theta=${SOURCES[3]} 
     fft=${SOURCES[4]} left=${TARGETS[1]} npk=50
     ''' % dt)

# isotropic case
Flow('iright ileft','vp vp theta theta fft',
     '''
     anisolr2 seed=2012 dt=%g velx=${SOURCES[1]} eta=${SOURCES[2]} theta=${SOURCES[3]} 
     fft=${SOURCES[4]} left=${TARGETS[1]} npk=50
     ''' % dt)

# elliptic case
Flow('eright eleft','vp vx theta theta fft',
     '''
     anisolr2 seed=2012 dt=%g velx=${SOURCES[1]} eta=${SOURCES[2]} theta=${SOURCES[3]} 
     fft=${SOURCES[4]} left=${TARGETS[1]} npk=50
     ''' % dt)

Flow('spike','vp','spike k1=751 k2=1809') 

Flow('source',None,
     '''
     spike n1=%d d1=%g k1=200 | 
     ricker1 frequency=20 
     ''' % (nt,dt))
Result('source','graph  title="Source Wavelet" ')

Flow('wave','source spike left right',
     '''
     fftwave2 cmplx=y ref=${SOURCES[1]} left=${SOURCES[2]} right=${SOURCES[3]} verb=y snap=100 snaps=$TARGET
     ''',stdout=0)


Flow('exp','refl left right',
     '''
     fftexp0 cmplx=y
     left=${SOURCES[1]} right=${SOURCES[2]} 
     nt=%d dt=%g 
     ''' % (nt,dt))

Flow('hessexp','exp','transp')

Result('hessexp','grey title="Exploding Reflector Data" ')


Flow('iexp','refl ileft iright',
     '''
     fftexp0 cmplx=y
     left=${SOURCES[1]} right=${SOURCES[2]} 
     nt=%d dt=%g 
     ''' % (nt,dt))

Flow('ihessexp','iexp','transp')

Result('ihessexp','grey title="Exploding Reflector Data (Isotropic)" ')


           
End()
