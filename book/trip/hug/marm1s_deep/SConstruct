#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
#from batch import getFlowSignature
import os
thispath        = os.getcwd()
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
RSFSRC          = os.getenv('RSFSRC')
towed_array     = os.path.join(RSFSRC,'trip/iwave/trace/main/towed_array.x')
acd             = os.path.join(RSFSRC,'trip/iwave/acd/main/acd.x')
acdcgne         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcgne.x')
acdfwi          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdfwi.x')
acdiva          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdiva.x')
acdds_grad      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdds_grad.x')
acddscheb_grad  = os.path.join(RSFSRC,'trip/iwave/acd/main/acddscheb_grad.x')
acdadjtest      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdadjtest.x')
helm            = os.path.join(RSFSRC,'trip/iwave/helm/main/helm.x')

fetches = {
    'line100m.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'hdr6km.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

Flow('ocean',None,'makevel n1=141 d1=24 n2=444 d2=24 o1=0 o2=0 v000=1.5 | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m/ms esize=4',stdin=0) 
Flow('vel24base','velocity.HH','dd form=native | window j1=6 j2=6')
Flow('vext','vel24base','window f2=383 n2=1 | spray axis=2 d=24 n=60')
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=24 ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=15 f1=0 | cat axis=1 d=24 ${SOURCES[1]}') 
#Flow('sedmts',['vel24','ocean'],'add mode=a scale=1,-1 ${SOURCES[1]}')
#Flow('sedhsm','sedmts','cp ${SOURCES[0]} ${TARGETS[0]}; ' + helm + ' in=${SOURCES[0]} out=${TARGETS[0]} datum=400 power=-1 bc=0 scale1=5.e+5 scale2=5.e+5',stdin=0,stdout=-1)
#Flow('vel24sm',['ocean','sedhsm'],'add mode=1 scale=1,1 ${SOURCES[1]}')
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')

Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=1')

Flow('csq24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')


Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < csq24.rsf csq24sm2.rsf |window min1=180| sfpad beg1=8') 
Flow('csqext.rsf','csq24sm.rsf', 'sfcat csq24sm.rsf csq24sm.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)
Flow('dcsqext.rsf','dcsq24.rsf', 'sfcat dcsq24.rsf dcsq24.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['line100m', 'hdr6km']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         '''
         towed_array
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# simulation - one shot
Flow('shot6km.su',['wavelet_hdr6km.su','csq24.rsf','hdr6km.su'],
     '/bin/cp ../hdr6km.su ../shot6km.su && ' + 
     '''
     acd
     deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
     csq=../csq24.rsf source=../wavelet_hdr6km.su 
     data=../shot6km.su 
     ''',
     stdin=0,stdout=0,workdir='shot6km.work')

# rtm - one shot
Flow('noahrtm',['wavelet_hdr6km.su','csq24noah.rsf','shot6km.su'],
     'add < ../csq24noah.rsf > ../noahrtm.rsf scale=0.0 && ' + 
     '''
     acd 
     deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
     csq=../csq24noah.rsf source=../wavelet_hdr6km.su 
     data=../shot6km.su csq_b1=../noahrtm.rsf nsnaps=20
     ''',
     stdin=0,stdout=0,workdir='noahrtm.work')

# simulation - one shot, smoothed velo
Flow('shot6kmsm2.su',['wavelet_hdr6km.su','csq24sm2.rsf'],
        '/bin/cp ../hdr6km.su ../shot6kmsm2.su && ' +
	'''
        acd
	deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24sm2.rsf source=../wavelet_hdr6km.su 
        data=../shot6kmsm2.su 
	''',
	stdin=0,stdout=0,workdir='shot6kmsm2.work')

# simulation - one shot, smoothed velo
Flow('shot6kmsm4.su',['wavelet_hdr6km.su','csq24sm4.rsf'],
        '/bin/cp ../hdr6km.su ../shot6kmsm4.su && ' +
	'''
        acd
	deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24sm4.rsf source=../wavelet_hdr6km.su 
        data=../shot6kmsm4.su 
	''',
	stdin=0,stdout=0,workdir='shot6kmsm4.work')

# simulation - one shot, smoothed velo
Flow('shot6kmsm.su',['wavelet_hdr6km.su','csq24sm.rsf'],
        '/bin/cp ../hdr6km.su ../shot6kmsm.su && ' +
 	'''
        acd
	deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24sm.rsf source=../wavelet_hdr6km.su 
        data=../shot6kmsm.su 
	''',
	stdin=0,stdout=0,workdir='shot6kmsm.work')

# simulation - one shot, smoothed velo
Flow('shot6kmbig.su',['wavelet_hdr6km.su','csq24big.rsf'],
        '/bin/cp ../hdr6km.su ../shot6kmbig.su && ' +
	'''
        acd
	deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24big.rsf source=../wavelet_hdr6km.su 
        data=../shot6kmbig.su 
	''',
	stdin=0,stdout=0,workdir='shot6kmbig.work')

# simulation - one shot, ocean
Flow('shot6kmnoah.su',['wavelet_hdr6km.su','csq24noah.rsf'],
        '/bin/cp ../hdr6km.su ../shot6kmnoah.su && ' +
 	'''
        acd
	deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24noah.rsf source=../wavelet_hdr6km.su 
        data=../shot6kmnoah.su 
	''',
	stdin=0,stdout=0, workdir='shot6kmnoah.work')

# Born simulation - one shot, big
Flow('born6kmbig.su',['wavelet_hdr6km.su','csq24big.rsf','dcsq24.rsf'],
        '/bin/cp ../hdr6km.su ../born6kmbig.su && ' + 
	'''
        acd
	deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24big.rsf csq_d1=../dcsq24.rsf source=../wavelet_hdr6km.su 
        data=../born6kmbig.su
	''',
	stdin=0,stdout=0, workdir='born6kmbig.work')

# Born simulation - one shot
Flow('born6km.su',['wavelet_hdr6km.su','csq24sm.rsf','dcsq24.rsf'],
        '/bin/cp ../hdr6km.su ../born6km.su && ' + 
	'''
        acd
	deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
	csq=../csq24sm.rsf csq_d1=../dcsq24.rsf source=../wavelet_hdr6km.su 
        data=../born6km.su
	''',
	stdin=0,stdout=0, workdir='born6km.work')

# Born inversion - one shot
Flow(['icsq6km.rsf', 'icsq6km_mut.su', 'icsq6km_est.su', 'icsq6km_res.su'], ['born6km.su', 'wavelet_hdr6km.su', 'csq24sm.rsf'],
        'add < ../csq24.rsf > ../icsq6km.rsf scale=0.0 && ' +
	'''
        acdcgne
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	csq=../csq24.rsf rcsq=../csq24sm.rsf 
	icsq=../icsq6km.rsf source=../wavelet_hdr6km.su 
        data=../born6km.su outfile=cgne.out 
	ResidualTol = 0.01 GradientTol = 0.01
        MaxIter = 20 dataest = ../icsq6km_est.su datares = ../icsq6km_res.su
	datamut=../icsq6km_mut.su mute_slope=0.7 mute_zotime=0 mute_width=200
	''',
	stdin=0,stdout=0,workdir='icsq6km.work')

# Born inversion - one shot, homog bg
Flow(['icsq6kmnoah.rsf', 'icsq6kmnoah_est.su', 'icsq6kmnoah_res.su'],['born6km.su', 'wavelet_hdr6km.su', 'csq24noah.rsf'],
        'add < ../csq24.rsf > ../icsq6kmhom.rsf scale=0.0 && ' +  
	acdcgne  + ' ' +  
	'''
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	csq=../csq24.rsf rcsq=../csq24noah.rsf 
	icsq=../icsq6kmnoah.rsf source=../wavelet_hdr6km.su 
        data=../born6km.su outfile=cgne.out 
	ResidualTol = 0.01 GradientTol = 0.01
        MaxIter = 20 dataest = ../icsq6kmnoah_est.su datares = ../icsq6kmnoah_res.su
	datamut=mut.su mute_slope=0.7 mute_zotime=0 mute_width=200
	''',
	stdin=0,stdout=0,workdir='icsq6kmnoah.work')

# Born inversion - one shot, no mute
Flow(['icsq6kmnm.rsf', 'icsq6kmnm_est.su', 'icsq6kmnm_res.su'],['born6km.su', 'wavelet_hdr6km.su', 'csq24sm.rsf'],
        'add < ../csq24.rsf > ../icsq6km.rsf scale=0.0 && ' +
        acdcgne  + ' ' +  
	'''
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	csq=../csq24.rsf rcsq=../csq24sm.rsf 
	icsq=../icsq6kmnm.rsf source=../wavelet_hdr6km.su 
        data=../born6km.su outfile=cgne.out 
	ResidualTol = 0.01 GradientTol = 0.01
        MaxIter = 20 dataest = est.su datares = res.su
	datamut=mut.su mute_slope=0.0 mute_zotime=0 mute_width=200
	''',
	stdin=0,stdout=0,workdir='icsq6kmnm.work')

# Born inversion - one shot, homog bg, no mute
Flow(['icsq6kmnoahnm.rsf', 'icsq6kmnoahnm_est.su', 'icsq6kmnoahnm_res.su'], ['born6km.su', 'wavelet_hdr6km.su', 'csq24noah.rsf'],
        'add < ../csq24.rsf > ../icsq6kmhom.rsf scale=0.0 && ' +  
	acdcgne  + ' ' +  
	'''
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	csq=../csq24.rsf rcsq=../csq24noah.rsf 
	icsq=../icsq6kmnoahnm.rsf source=../wavelet_hdr6km.su 
        data=../born6km.su outfile=cgne.out 
	ResidualTol = 0.01 GradientTol = 0.01
        MaxIter = 20 dataest = est.su datares = res.su
	datamut=mut.su mute_slope=0.0 mute_zotime=0 mute_width=200
	''',
	stdin=0,stdout=0,workdir='icsq6kmnoahnm.work')

# OLS
Flow(['ols6km'],['shot6km.su', 'wavelet_hdr6km.su', 'csq24noah'],
        'add < ../csq24noah.rsf > ../ols6km.rsf scale=1.0 && ' +  
	acdfwi + ' ' +
	'''
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	mute_slope=0.0 mute_zotime=0 mute_width=2
	source=../wavelet_hdr6km.su
	csq=../csq24noah.rsf init_csq=../csq24noah.rsf final_csq=../ols6km.rsf
	data=../shot6km.su datamut=mute.su outfile=fwi.out
	mute_slope=0.0 mute_zotime=0 mute_width=200 mute_type=0
	taper_min=0.0 taper_max=3000.0 taper_width=200 taper_type=0
	time_width=0 dataest=est.su datares=res.su
	''',
	stdin=0,stdout=0,workdir='ols6km.work')

# movie-src output file
Flow('movie6km','wavelet_hdr6km.su csq24sm',
     '''
     makevel n1=141 d1=24 n2=444 d2=24 n3=21 d3=100 o1=0 o2=0 o3=0 v000=0.0 | 
     put id1=0 id2=1 id3=2 dim=2 gdim=3 > $TARGET &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 movie=$TARGET
     ''',stdin=0,stdout=-1,workdir='moviesrc.work')

Result('vel24', 'vel24', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\_" unit="m\_/ms\_" | grey color=c mean=y title="Flooded Marmousi" scalebar=y barreverse=y')

Result('vel24m', 'vel24sm', 'put label1=Depth unit1=m label2=Distance unit2=m label="V\_p\_" unit="m\_/ms\_" | grey color=c mean=y title="Smoothed, Flooded Marmousi" scalebar=y barreverse=y')

Result('wavelet','wavelet_base.su', 'suread endian=0 read=data | put label1=Time label2=Pressure unit1=s unit2=GPa title="Gaussian deriv fpeak=6 Hz" unit="GPa" |sfgraph')

Result('shot6km','shot6km.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=0 unit1=s unit2=km title="x\_s\_=6 km" label="Pressure" unit="GPa" | grey scalebar=y barreverse=y')

Result('shot6kmsm','shot6kmsm.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=0 unit1=s unit2=km title="x\_s\_=6 km" label="Pressure" unit="GPa" | grey scalebar=y barreverse=y')

Result('shot6kmnoah','shot6kmnoah.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=0 unit1=s unit2=km title="x\_s\_=6 km" label="Pressure" unit="GPa" | grey scalebar=y barreverse=y')

Result('born6km','born6km.su', 'suread endian=0 read=data | put label1=Time label2=Distance d2=0.025 o2=0 unit1=s unit2=km title="x\_s\_=6 km" label="Pressure" unit="GPa" | grey scalebar=y barreverse=y')




End()
